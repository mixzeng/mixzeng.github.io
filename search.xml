<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Alamode软件安装</title>
      <link href="2020/12/27/alamode-install/"/>
      <url>2020/12/27/alamode-install/</url>
      
        <content type="html"><![CDATA[<p>本文介绍使用Intel编译器安装Alamode软件。Intel编译器的版本为<a href="https://software.intel.com/content/www/us/en/develop/articles/intel-c-compiler-190-for-linux-release-notes-for-intel-parallel-studio-xe-2019.html" target="_blank" rel="noopener">Intel-19</a>。</p><h4 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h4><blockquote><ul><li>C++ compiler (Intel compiler is recommended.)</li><li>LAPACK library</li><li>MPI library (OpenMPI, MPICH2, IntelMPI, etc.)</li><li><a href="http://www.boost.org/" target="_blank" rel="noopener">Boost C++ library</a></li><li>FFTW library</li><li><a href="http://eigen.tuxfamily.org/" target="_blank" rel="noopener">Eigen3 library</a></li><li><a href="https://atztogo.github.io/spglib/" target="_blank" rel="noopener">spglib</a></li></ul></blockquote><h4 id="安装库"><a href="#安装库" class="headerlink" title="安装库"></a>安装库</h4><h5 id="Boost-C"><a href="#Boost-C" class="headerlink" title="Boost C++"></a>Boost C++</h5><p>从官网下载后解压并把里面的boost文件夹放入到alamode根目录下的etc文件夹中。</p><pre class="line-numbers language-shell"><code class="language-shell">cd alamodemkdir etc; cd etc(Download a source file and mv it to etc/)tar xf boost_x_yy_z.tar.bz2cd ../mkdir include;cd includeln -s ../etc/boost_x_yy_z/boost .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Eigen3"><a href="#Eigen3" class="headerlink" title="Eigen3"></a>Eigen3</h5><p>使用同样的方法吧Eigen3里面的Eigen文件夹链接到include文件夹中。</p><pre class="line-numbers language-shell"><code class="language-shell">ln -s ../etc/eigen-eigen-*/Eigen .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="spglib"><a href="#spglib" class="headerlink" title="spglib"></a>spglib</h5><p>根据官网教程安装即可。</p><h4 id="Alamode安装"><a href="#Alamode安装" class="headerlink" title="Alamode安装"></a>Alamode安装</h4><pre class="line-numbers language-shell"><code class="language-shell">cd alm/cp Makefile.linux Makefile(Edit Makefile here)make -jcd ../anphon/cp Makefile.linux Makefile(Edit Makefile here)make -jcd ../tools/(Edit Makefile here)make -j<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意gcc和ifort（&gt;15）的版本不能太低。在centos6.5下，应该安装一个gcc&gt;=4.85的库再进行安装。</p>]]></content>
      
      
      <categories>
          
          <category> Software Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Alamode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TDEP软件安装</title>
      <link href="2020/12/27/tdep-install/"/>
      <url>2020/12/27/tdep-install/</url>
      
        <content type="html"><![CDATA[<p>介绍使用intel编译器编译tdep。首先解压tdep软件包并进入根目录</p><pre class="line-numbers language-shell"><code class="language-shell">cd tdep/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改important_settings文件，参考如下。注意所有的库尽量使用同一版本编译器安装。</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># A central place to put all the important paths. You probably have to modify this to make</span><span class="token comment" spellcheck="true"># things work. This is an example for the BC cluster Pleiades. The modules I have loaded are</span><span class="token comment" spellcheck="true"># intel/2017</span><span class="token comment" spellcheck="true"># openmpi/2.1.0.intel2017</span><span class="token comment" spellcheck="true"># with hdf5 compiled manually</span><span class="token comment" spellcheck="true"># Fortran compiler</span>FORTRAN_COMPILER<span class="token operator">=</span><span class="token string">"/public1/soft/intel/2019/compilers_and_libraries/linux/bin/intel64/ifort"</span>OPTIMIZATION_LEVEL<span class="token operator">=</span><span class="token string">"-O3 -xHost"</span>OPTIMIZATION_SENSITIVE<span class="token operator">=</span><span class="token string">"-O3 -xHost"</span><span class="token comment" spellcheck="true"># flags for the fortran compiler to make it play nice.</span>FCFLAGS<span class="token operator">=</span><span class="token string">"-cpp -fpp -qopenmp -gen-interfaces -fPIC"</span><span class="token comment" spellcheck="true">#FCFLAGS="-fpp -qopenmp"</span>FCFLAGS_EXTRA<span class="token operator">=</span><span class="token string">""</span><span class="token comment" spellcheck="true">#FCFLAGS_EXTRA="-check bounds -check uninit -check pointers -check stack -traceback -g -fpe0 -init=snan,arrays -warn all -warn stderrors -stand f08 -diag-disable 5268 -diag-disable 7416"</span>MODULE_FLAG<span class="token operator">=</span><span class="token string">"-module"</span><span class="token comment" spellcheck="true"># Precompiler flags. Selecting default gnuplot terminal, and makes the progressbars work.</span>PRECOMPILER_FLAGS<span class="token operator">=</span><span class="token string">"-DGP<span class="token variable">${GNUPLOTTERMINAL}</span> -Dgfortranprogressbar"</span> <span class="token comment" spellcheck="true"># for gfortran</span><span class="token comment" spellcheck="true"># Which gnuplot terminal to use by default.</span><span class="token comment" spellcheck="true">#GNUPLOTTERMINAL="aqua"  # nice on OSX, needs aquaterm installed and gnuplot compiled with support for it.</span><span class="token comment" spellcheck="true">#GNUPLOTTERMINAL="wxt"  # nice on linux.</span>GNUPLOTTERMINAL<span class="token operator">=</span><span class="token string">"wxt"</span>  <span class="token comment" spellcheck="true"># fallback that works but looks kind of bad</span><span class="token comment" spellcheck="true"># the header to put in python scripts.</span>PYTHONHEADER<span class="token operator">=</span><span class="token string">"#!/usr/bin/python"</span><span class="token comment" spellcheck="true"># These are the BLAS/LAPACK libraries. On OSX with gfortran, use the built-in</span><span class="token comment" spellcheck="true"># where you just specify -framework accelerate and everything works. WIth some other</span><span class="token comment" spellcheck="true"># compiler on another system, you have to specifiy the paths manually. There are some</span><span class="token comment" spellcheck="true"># examples here.</span>MKLROOT<span class="token operator">=</span><span class="token string">"/public1/soft/intel/2019/compilers_and_libraries/linux/mkl"</span>PATH_TO_BLASLAPACK_LIB<span class="token operator">=</span><span class="token string">"-L<span class="token variable">${MKLROOT}</span>/lib/intel64"</span>PATH_TO_BLASLAPACK_INC<span class="token operator">=</span><span class="token string">"-I<span class="token variable">${MKLROOT}</span>/include"</span>BLASLAPACK_LIBS<span class="token operator">=</span><span class="token string">"-lpthread -lmkl_sequential -lmkl_intel_lp64 -lmkl_core -lmkl_blas95_lp64 -lmkl_lapack95_lp64"</span><span class="token comment" spellcheck="true"># For the autocorrelation code, I use fast Fourier transforms. fftw needs to be installed and</span><span class="token comment" spellcheck="true"># linked. This is where homebrew installed mine on osx</span>PATH_TO_FFTW_LIB<span class="token operator">=</span><span class="token string">""</span>PATH_TO_FFTW_INC<span class="token operator">=</span><span class="token string">"-I<span class="token variable">${MKLROOT}</span>/include/fftw"</span>FFTW_LIBS<span class="token operator">=</span><span class="token string">""</span><span class="token comment" spellcheck="true"># The thermal conductivity is MPI parallel. Then you need an mpi installation. This one points to</span><span class="token comment" spellcheck="true"># openmpi installed by homebrew in it's default location</span>PATH_TO_MPI_LIB<span class="token operator">=</span><span class="token string">"-L/public1/soft/openmpi/4.0.1-pmi2-icc19/lib"</span>PATH_TO_MPI_INC<span class="token operator">=</span><span class="token string">"-I/public1/soft/openmpi/4.0.1-pmi2-icc19/include"</span>MPI_LIBS<span class="token operator">=</span><span class="token string">"-lmpi -lmpi_mpifh"</span><span class="token comment" spellcheck="true"># HDF5 is now needed</span>PATH_TO_HDF5_LIB<span class="token operator">=</span><span class="token string">"-L/public1/soft/hdf5/1.12.0-icc19/lib"</span>PATH_TO_HDF5_INC<span class="token operator">=</span><span class="token string">"-I/public1/soft/hdf5/1.12.0-icc19/include"</span>HDF5_LIBS<span class="token operator">=</span><span class="token string">"-lhdf5 -lhdf5_fortran"</span><span class="token comment" spellcheck="true"># Optional things, now disabled</span>USEAIMS<span class="token operator">=</span><span class="token string">"no"</span><span class="token comment" spellcheck="true"># Now I also need a C-compiler</span>C_COMPILER<span class="token operator">=</span><span class="token string">"icc"</span>C_FLAGS<span class="token operator">=</span><span class="token string">""</span><span class="token comment" spellcheck="true">#PATH_TO_AIMS_LIB="-L/home/hellmano/software/aims/lib"</span><span class="token comment" spellcheck="true">#PATH_TO_AIMS_INC="-I/home/hellmano/software/aims/src"</span><span class="token comment" spellcheck="true"># also add the ScaLAPACK libs here</span><span class="token comment" spellcheck="true">#AIMS_LIBS="-laims.171013.mpi"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>执行安装命令</li></ul><pre class="line-numbers language-shell"><code class="language-shell">bash build_things.sh  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>修改环境变量</li></ul><pre class="line-numbers language-shell"><code class="language-shell">vim ~/.bashrcMANPATH=$MANPATH:/home/***/software/tdep/manPATH=$PATH:/home/***/software/tdep/binexport MANPATHexport PATHalias gnuplot='gnuplot -persist'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Software Install </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TDEP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>晶胞之间相互转换</title>
      <link href="2020/12/27/crystal-cell-convert/"/>
      <url>2020/12/27/crystal-cell-convert/</url>
      
        <content type="html"><![CDATA[<p>固体物理中经常会涉及到两种晶胞的选取方式，一种叫primitive cell（原胞），另一种叫conventional cell（单胞，惯用晶胞）。有些工具已经帮我们实现了这两种晶胞的转换。</p><h3 id="晶胞转换方法"><a href="#晶胞转换方法" class="headerlink" title="晶胞转换方法"></a>晶胞转换方法</h3><blockquote><ul><li>phonopy内置功能；</li><li>Avogadro内置功能；</li><li>Spglib库；</li><li><a href="http://www.densityflow.com/" target="_blank" rel="noopener">QEtoolkit</a>;</li><li><a href="http://materials.duke.edu/awrapper.html" target="_blank" rel="noopener">AFLOW在线功能</a></li></ul></blockquote><h4 id="phonopy晶胞转换"><a href="#phonopy晶胞转换" class="headerlink" title="phonopy晶胞转换"></a>phonopy晶胞转换</h4><pre class="line-numbers language-shell"><code class="language-shell">phonopy --symmetry POSCAR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>phonopy判断的阈值比较小，有时候可以设置大一点</p><pre class="line-numbers language-shell"><code class="language-shell">phonopy --symmetry --tolerance=1.0e-3 POSCAR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>POSCAR是VASP输入格式的晶胞。执行命令后会生成BPOSCAR（conventional cell）和PPOSCAR（primitive cell）。</p><h4 id="Avogadro晶胞转换"><a href="#Avogadro晶胞转换" class="headerlink" title="Avogadro晶胞转换"></a>Avogadro晶胞转换</h4><p>安装后导入结构，执行<strong>Crystallography -&gt;Reduce-&gt;Reduce Cell(primitive cell)</strong>，当然，有时候也要设置阈值 <strong>Crystallography -&gt;Settings-&gt;Tolerance for symmetry operations</strong>。</p><h4 id="QEtoolkit"><a href="#QEtoolkit" class="headerlink" title="QEtoolkit"></a>QEtoolkit</h4><p>这个网页集成的功能基于spglib的，当然前面的phonopy也是。</p><h4 id="AFLOW"><a href="#AFLOW" class="headerlink" title="AFLOW"></a>AFLOW</h4><p>这个网站功能比较强大。</p><h4 id="Spglib库使用"><a href="#Spglib库使用" class="headerlink" title="Spglib库使用"></a>Spglib库使用</h4><p>下面介绍怎么用spglib库的功能实现晶胞转换。<br>首先是读取结构文件（read_poscar.py）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> spglib<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> os<span class="token keyword">import</span> linecache<span class="token keyword">class</span> <span class="token class-name">read_poscar</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        struct<span class="token operator">=</span>None<span class="token punctuation">,</span>        pos_name<span class="token operator">=</span>None<span class="token punctuation">,</span>        lattice_index<span class="token operator">=</span>None<span class="token punctuation">,</span>        lat<span class="token operator">=</span>None<span class="token punctuation">,</span>        lat_recell<span class="token operator">=</span>None<span class="token punctuation">,</span>        atomname<span class="token operator">=</span>None<span class="token punctuation">,</span>        atomnum<span class="token operator">=</span>None<span class="token punctuation">,</span>        postype<span class="token operator">=</span>None<span class="token punctuation">,</span>        pos<span class="token operator">=</span>None<span class="token punctuation">,</span>        spg_number<span class="token operator">=</span>None<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>struct <span class="token operator">=</span> linecache<span class="token punctuation">.</span>getlines<span class="token punctuation">(</span><span class="token string">"POSCAR"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># read POSCAR to get some paramatrics: sys_name; lattice; atom_name; atom_number; atom_position</span>        <span class="token comment" spellcheck="true"># and get spacegroup_number</span>        poscar <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> self<span class="token punctuation">.</span>struct<span class="token punctuation">]</span>        num <span class="token operator">=</span> len<span class="token punctuation">(</span>poscar<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>pos_name <span class="token operator">=</span> poscar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lat_index <span class="token operator">=</span> poscar<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lattice_index <span class="token operator">=</span> float<span class="token punctuation">(</span>self<span class="token punctuation">.</span>lat_index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># matrics of lattice vector</span>        lat_vector <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> latt <span class="token keyword">in</span> poscar<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            latt <span class="token operator">=</span> latt<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            lat_vector<span class="token punctuation">[</span>index<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> latt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>lattice <span class="token operator">=</span> lat_vector        self<span class="token punctuation">.</span>atomname <span class="token operator">=</span> poscar<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>atomnum <span class="token operator">=</span> poscar<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>postype <span class="token operator">=</span> poscar<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>        atom_len<span class="token operator">=</span>len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomname<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># matrics of atom position</span>        i <span class="token operator">=</span> num <span class="token operator">-</span> <span class="token number">8</span>        position_vector <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> poss <span class="token keyword">in</span> poscar<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">:</span>            poss <span class="token operator">=</span> poss<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#position_vector[index, 0:3] = poss[0:3]</span>            position_vector<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> poss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            position_vector<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> poss<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            position_vector<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> poss<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>            index <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>lat <span class="token operator">=</span> lat_vector <span class="token operator">*</span> self<span class="token punctuation">.</span>lattice_index        self<span class="token punctuation">.</span>pos <span class="token operator">=</span> position_vector        atom_numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomnum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#+int(self.atomnum[1]))</span>        cell <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>lat<span class="token punctuation">,</span> self<span class="token punctuation">.</span>pos<span class="token punctuation">,</span> atom_numbers<span class="token punctuation">)</span>        database <span class="token operator">=</span> spglib<span class="token punctuation">.</span>get_symmetry_dataset<span class="token punctuation">(</span>            cell<span class="token punctuation">,</span> symprec<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>spg_number <span class="token operator">=</span> database<span class="token punctuation">[</span><span class="token string">"number"</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">system_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>pos_name    <span class="token keyword">def</span> <span class="token function">latt_index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>lattice_index    <span class="token keyword">def</span> <span class="token function">latti</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>lattice    <span class="token keyword">def</span> <span class="token function">atom_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>atomname    <span class="token keyword">def</span> <span class="token function">atom_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>atomnum    <span class="token keyword">def</span> <span class="token function">position_type</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>postype    <span class="token keyword">def</span> <span class="token function">positions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>pos    <span class="token keyword">def</span> <span class="token function">spacegroup_num</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>spg_number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后转换晶胞</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> read_poscar <span class="token keyword">as</span> readpos<span class="token keyword">import</span> spglib<span class="token keyword">class</span> <span class="token class-name">recell</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span>        spg_num<span class="token operator">=</span>None<span class="token punctuation">,</span>        lattindex<span class="token operator">=</span>None<span class="token punctuation">,</span>        latt<span class="token operator">=</span>None<span class="token punctuation">,</span>        atomname<span class="token operator">=</span>None<span class="token punctuation">,</span>        atomnum<span class="token operator">=</span>None<span class="token punctuation">,</span>        postype<span class="token operator">=</span>None<span class="token punctuation">,</span>        position<span class="token operator">=</span>None<span class="token punctuation">,</span>        cell_lattice<span class="token operator">=</span>None<span class="token punctuation">,</span>        cell_position<span class="token operator">=</span>None<span class="token punctuation">,</span>        cell_atomnum<span class="token operator">=</span>None<span class="token punctuation">,</span>        to_pricell <span class="token operator">=</span> None    <span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># read the origmitive cell</span>        self<span class="token punctuation">.</span>spg_num <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spacegroup_num<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lattindex <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>latt_index<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>latt <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>latti<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>atomname <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>atom_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>atomnum <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>atom_number<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>postype <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>position_type<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>position <span class="token operator">=</span> readpos<span class="token punctuation">.</span>read_poscar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>positions<span class="token punctuation">(</span><span class="token punctuation">)</span>        orignumbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomnum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                orignumbers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        origlattice <span class="token operator">=</span> self<span class="token punctuation">.</span>latt <span class="token operator">*</span> self<span class="token punctuation">.</span>lattindex        origpositon <span class="token operator">=</span> self<span class="token punctuation">.</span>position        origcell <span class="token operator">=</span> <span class="token punctuation">(</span>origlattice<span class="token punctuation">,</span> origpositon<span class="token punctuation">,</span> orignumbers<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>to_pricell<span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># refine cell</span>            self<span class="token punctuation">.</span>cell_lattice<span class="token punctuation">,</span> re_position<span class="token punctuation">,</span> re_numbers <span class="token operator">=</span> spglib<span class="token punctuation">.</span>standardize_cell<span class="token punctuation">(</span>                cell<span class="token operator">=</span>origcell<span class="token punctuation">,</span> symprec<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> to_primitive<span class="token operator">=</span><span class="token boolean">False</span>            <span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>cell_lattice<span class="token punctuation">,</span> re_position<span class="token punctuation">,</span> re_numbers <span class="token operator">=</span> spglib<span class="token punctuation">.</span>standardize_cell<span class="token punctuation">(</span>                cell<span class="token operator">=</span>origcell<span class="token punctuation">,</span> symprec<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> to_primitive<span class="token operator">=</span><span class="token boolean">True</span>            <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 主要对坐标进行重新排序</span>        re_position_list <span class="token operator">=</span> list<span class="token punctuation">(</span>re_position<span class="token punctuation">)</span>        zipped <span class="token operator">=</span> list<span class="token punctuation">(</span>zip<span class="token punctuation">(</span>re_numbers<span class="token punctuation">,</span> re_position_list<span class="token punctuation">)</span><span class="token punctuation">)</span>        zipsorted <span class="token operator">=</span> sorted<span class="token punctuation">(</span>zipped<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        re_numbers_sort<span class="token punctuation">,</span> re_positon_sort <span class="token operator">=</span> zip<span class="token punctuation">(</span><span class="token operator">*</span>zipsorted<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cell_position <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>re_positon_sort<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cell_atomnum <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomnum<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            num <span class="token operator">=</span> int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomnum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>re_numbers_sort<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>orignumbers<span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>cell_atomnum<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># write the refine cell</span>        writepos <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"RECELL"</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"recell_poscar"</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"1.0"</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_lattice<span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"   "</span><span class="token punctuation">,</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_lattice<span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"   "</span><span class="token punctuation">,</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_lattice<span class="token punctuation">[</span>m<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                file<span class="token operator">=</span>writepos<span class="token punctuation">,</span>            <span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomname<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">for</span> l <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>atomname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_atomnum<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">"\n"</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>postype<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> file<span class="token operator">=</span>writepos<span class="token punctuation">)</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>cell_position<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_position<span class="token punctuation">[</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"   "</span><span class="token punctuation">,</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_position<span class="token punctuation">[</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string">"   "</span><span class="token punctuation">,</span>                format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cell_position<span class="token punctuation">[</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">".10f"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                file<span class="token operator">=</span>writepos<span class="token punctuation">,</span>            <span class="token punctuation">)</span>        writepos<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">latti</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cell_lattice    <span class="token keyword">def</span> <span class="token function">atom_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cell_atomnum    <span class="token keyword">def</span> <span class="token function">positions</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>cell_position<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> reposcarreposcar<span class="token punctuation">.</span>recell<span class="token punctuation">(</span>to_pricell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#转化为惯用晶胞</span>reposcar<span class="token punctuation">.</span>recell<span class="token punctuation">(</span>to_pricell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#转化为原胞</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Crystal Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Crystal Cell </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
